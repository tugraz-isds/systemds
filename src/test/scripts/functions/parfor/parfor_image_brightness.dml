#-------------------------------------------------------------
#
# Copyright 2019 Graz University of Technology
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-------------------------------------------------------------

# input data taken from deep learning examples
# Format: <label>,pixel_1,pixel2,pixel_3,etc
#         28x28 grayscale

data = read($in_file, format="csv")
num_images=ifdef($num_images , nrow(data))
num_augmentations = ifdef($num_augmentations, 1)

num_cols = ncol(data)
images = data[1:num_images,2:num_cols]
labels = data[1:num_images,1]

augmented_images = matrix(0, rows=num_augmentations * num_images, cols=num_cols)
max_value=255
brightness_adjustments = rand(rows=num_augmentations, cols=1, 
    min=-(max_value / 2), max=max_value / 2, pdf="uniform", sparsity=1.0)

parfor (idx in 0:(num_images-1), check = 0) {
    i = idx + 1

    image2d = matrix(images[i,], $height, $width)

    for(a in 1:num_augmentations) {
        # store label
        augmented_images[idx*num_augmentations+a,1] = as.integer(as.scalar(labels[i]))

        # do augmentation
        img_out = image_brightness(image2d, brightness_adjustments[a], max_value)

        # reshape and store augmentation
        augmented_images[idx*num_augmentations+a,2:num_cols] = matrix(img_out, 1, $width * $height)
    }
}

write(augmented_images, $out_file, format="csv")
