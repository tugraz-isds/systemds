#-------------------------------------------------------------
#
# Copyright 2020 Graz University of Technology
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#-------------------------------------------------------------

# Implements builtin for finding functional dependencies
# 
# INPUT PARAMETERS:
# ---------------------------------------------------------------------------------------------
# NAME            TYPE    DEFAULT     MEANING
# ---------------------------------------------------------------------------------------------
# TODO
 
#Output(s)
# ---------------------------------------------------------------------------------------------
# NAME            TYPE    DEFAULT     MEANING
# ---------------------------------------------------------------------------------------------
# FD              Double   ---        matrix of functional dependencies 

m_discoverFD = function(Matrix[Double] X)
  return(Matrix[Double] FD)
{
  #TODO pass mask of relevant columns (only integer/boolean)
  # remove known dependencies and only iterate over pairs for relevant cols

  # allocate output and working sets
  n = ncol(X)
  FD = matrix(0, n, n)
  
  # compute summary statistics (assumes integer codes) 
  #TODO parfor over colDistinct instead (to work not just with recoded)
  cm = colMaxs(X) # num distinct per column
  
  # add know functional dependencies
  FD = FD + (cm == 1) # constant columns determined by all columns
  FD = FD + (t(cm) == n) # unique columns determine all columns
  
  # sort num distinct and enumerate only upper triangle 
  cm2 = order(target=t(cm), decreasing=TRUE, index.return=TRUE)
  parfor(i in 1 : n, check=0) {
    index_i = as.scalar(cm2[i,1])
    ndX = as.scalar(cm[1,index_i])
    if( ndX!=1 & ndX!=n ) {
      Xi = X[,index_i];
      parfor(j in i+1:n, check=0) {
        index_j = as.scalar(cm2[j,1])
        ndY = as.scalar(cm[1,index_j])
        [A_determines_B, del] = isFD(Xi, X[,index_j], ndX, ndY);
        if(A_determines_B & del > 0.8)
          FD[index_i, index_j] = 1
      }
    }
  }
}

isFD = function(Matrix[Double] X, Matrix[Double] Y, Integer ndX, Integer ndY)
  return(Boolean A_determines_B, Double delta)
{
  ctab = table(X, Y, ndX, ndY)
  rowSumTable = rowSums(ctab != 0) # X values -> num Y values
  A_determines_B = (sum(rowSumTable==1) == ndX);
  # robust functional dependency ratio (1.0 if A -> B)
  delta = sum(rowMaxs(ctab)) / nrow(X) 
}

colDistinct = function(Matrix[Double] X)
  return(double distinctItems)
{
  distinctItems = sum(table(X, 1) != 0)
}
