#-------------------------------------------------------------
#
# Copyright 2019 Graz University of Technology
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#-------------------------------------------------------------

# Assumptions
# 1. The data is continous/numerical 
# 2. The missing values are denoted by zeros

# Builtin function Implements Multiple Imputations using Chained Equations for continous/numerical data
#
# INPUT PARAMETERS:
# ---------------------------------------------------------------------------------------------
# NAME            TYPE    DEFAULT     MEANING
# ---------------------------------------------------------------------------------------------
# X               Double   ---         matrix X of feature vectors
# iter            Integer    3         Number of iteration for multiple imputations 
# complete        Integer    3         A complete dataset generated though a specific iteration
# ---------------------------------------------------------------------------------------------
 

#Output(s)
# ---------------------------------------------------------------------------------------------
# NAME                  TYPE    DEFAULT     MEANING
# ---------------------------------------------------------------------------------------------
# dataset               Double   ---        imputed dataset
# singleSet             Double   ---        A complete dataset generated though a specific iteration



m_mice_lm = function(Matrix[Double] X, Integer iter = 3, Integer complete = 3)
  return(Matrix[Double] dataset, Matrix[Double] singleSet) 
{
  n = nrow(X)
  row = n*complete;
  col = ncol(X);
  Result = matrix(0, rows = 1, cols = col)
  Mask_Result = matrix(0, rows = 1, cols = col)

  # storing the mask/address of missing values
  Mask = (X == 0);
  # filling the missing data with their means
  X2 = X+(Mask*colMeans(X))

  # slicing non-missing dataset for training columnwise linear regression
  inverseMask = 1 - Mask;

  for(k in 1:iter)
  {
    Mask_Filled = Mask;
  	
    for(i in 1:col)
    {
      # construct column selector
      sel = cbind(matrix(1,1,i-1), as.matrix(0), matrix(1,1,col-i));

      # prepare train data set X and Y
      slice1 = removeEmpty(target = X2, margin = "rows", select = inverseMask[,i])
      train_X = removeEmpty(target = slice1, margin = "cols", select = sel);
      train_Y = slice1[,i]

      # prepare score data set X and Y for imputing Y
      slice2 = removeEmpty(target = X2, margin = "rows", select = Mask[,i])
      test_X =  removeEmpty(target = slice2, margin = "cols", select = sel);
      test_Y = slice2[,i]

      # learning a regression line 
      beta = lm(X=train_X, y=train_Y, verbose=FALSE);

      # predicting missing values 
      pred = lmpredict(X=test_X, w=beta)

      # imputing missing column values (assumes Mask_Filled being 0/1-matrix)
      R = removeEmpty(target=Mask_Filled[,i] * seq(1,n), margin="rows");
      #TODO modify removeEmpty to return zero row and n columns
      if(!(nrow(R) == 1 & as.scalar(R[1,1] == 0)))
        Mask_Filled[,i] = table(R, 1, pred, n, 1);
    }

    # binding results of multiple imputations
    Result = rbind(Result, X + Mask_Filled)
    Mask_Result = rbind(Mask_Result, Mask_Filled)
    Mask_Filled = Mask;
  }
  # return imputed dataset
  Result = Result[2: n*iter+1, ]
  Mask_Result = Mask_Result[2: n*iter+1, ]
  index = (((complete*n)-n)+1)

  # aggregating the results
  Agg_Matrix = Mask_Result[index:row, ]
  for(d in seq(1, (iter-1), 1))
    Agg_Matrix = Agg_Matrix + Mask_Result[(((d-1)*n)+1):(n*d),]
  Agg_Matrix =(Agg_Matrix/iter)

  # return imputed data
  dataset = X + Agg_Matrix
  singleSet = Result[index:row, ]
}
